
show databases	//查看所有数据库

show create table employee	//查看一个表的属性

show function status		//查看有哪些存储过程

show index from employee  //查看表上的索引

alter table employee modify id int not null 	//更改表某列的属性

alter table employee drop constraint ck_salary	//删除表的一个约束

alter table employee  add constraint ck_salary check(salary>0 and salary<10000)
					//增加约束

limit m,n	//显示从第m行（不包括第m行）开始的后n行记录


批量更改可以用update XXX set XXX=XXX where ...


关键字执行顺序：1.from  2.where 3.group by   4.having   5.select   6.order by

drop、truncate、delete区别：
	1.delete：删除表中的行，并且将删除操作记录到日志文件中，以便回滚操作
	2.TRUNCATE TABLE ：一次性地从表中删除所有的数据并不把单独的删除操作记录记入日志保存，删除行是不能恢复的。
			  并且在删除的过程中不会激活与表有关的删除触发器。执行速度快。
	3.TRUNCATE 和DELETE只删除数据， DROP则删除整个表（结构和数据）。
	






内连接：只显示交集。只保留所有查询都有结果的记录，其它都丢弃。  (inner join)
外连接：全部显示，没有的就为null    （left join,right join,full join）
A left join B：  A全部显示（连接条件以A为主），B中没有的就为null
A right join B：B全部显示（连接条件以B为主），A中没有的就为null


#{}与${}
	#{}： 预编译，是占位符。 将#{}的内容替换为？可以防止sql注入
	${}： 字符串替换，是拼接符。	将内容替换成变量的值。没有预编译，取到什么就是什么。

脏读：	    一个事务读取到了另外一个事务没有提交的数据
不可重复读： 在一个事务的两次查询之中数据不一致，（别的事务修改了其中被查询的数据）
幻读：	    在一个事务的两次查询中数据行数不一致（别的事务向表中插入了数据，导致另一个事务前后查到的行数不同）

数据库三范式：
	第一范式：每个列都不可再分
	第二范式：在第一范式的基础上，非主键列完全依赖于主键，而不能是依赖于主键的一部分。
		（当数据表中是联合主键，但是有的列只依赖联合主键中的一个或一部分属性组成的联合主键，此时需要拆表才能复合第二范式。）
	第三范式：在第二范式的基础上，非主键列只依赖于主键，不依赖于其他非主键。

ACID特性：
	1.原子性：一个事务内的操作要么全都执行，要么全不执行
		undolog保存了事务发生之前的数据的一个版本，可以根据undolog进行相反的操作，实现回滚。
	2.一致性：事务提交前后，数据保持一致（如转账操作）
	3.隔离性：两个事务之间互不影响
		写-写依靠锁。写-读依靠mvcc
	4.持久性：事务一旦提交，对数据库的改变是永久的，保存到磁盘上
		依靠 redo_log：与事务交互的数据是存放在缓冲区的，将缓冲区的数据写入磁盘，或者从磁盘 中读取。
		事务提交时，先将修改写入redolog中（以追加的方式，比buffer写入到磁盘中快，减少io），当发生故障时，可以根据redolog恢复


mysql锁：1.从颗粒度来分：全局锁>表锁>页锁>行锁           。间隙锁（锁一个范围）
	（颗粒度越小，资源争用的概率越小，并发处理能力越高。但获取和释放锁的开销越大，越容易发生死锁）
	2.从锁的级别分：共享锁（读锁）、排他锁（写锁）、意向共享锁、意向排他锁
	（读锁：加锁期间，任何事务都不能对数据进行修改，别的事务可以再加读锁）
	（写锁：加索期间，其他事务都不能对数据进行修改，也不能再加任何锁）
	3.从锁的思想分：乐观锁、悲观锁

数据库事务隔离级别：
	1.读未提交：不加锁（可能发生 脏读、幻读、不可重复读）
	2.读已提交：加共享锁（读锁），但是在语句执行完以后释放锁（可能发生 幻读、不可重复读）
mysql默认:3.可重复读：加共享锁（读锁），在事务执行完以后释放锁
		对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改（可能发生幻读）
	4.串行化	（解决所有问题，但并发效率低）


mysql存储引擎：
	Innodb引擎：供了对数据库ACID事务的支持。并且还提供了行级锁和外键的约束。它的设计的目标就是处理大数据容量的数据库系统。
	MyISAM引擎(原本Mysql的默认引擎)：不提供事务的支持，也不支持行级锁和外键。
	MEMORY引擎：所有的数据都在内存中，数据的处理速度快，但是安全性不高。

MyISAM索引与InnoDB索引的区别？
	Innodb：所有的表都保存在同一个数据文件中
	MyIASM：每张表被存放在三个文件：表格定义、数据文件、索引文件
	InnoDB索引是聚簇索引，MyISAM索引是非聚簇索引。
	InnoDB的主键索引的叶子节点存储着行数据，因此主键索引非常高效。
	MyISAM索引的叶子节点存储的是行数据地址，需要再寻址一次才能得到数据。
	InnoDB非主键索引的叶子节点存储的是主键和其他带索引的列数据，因此查询时做到覆盖索引会非常高效。

B树：每个节点都保存有数据，由于每个节点可以存放多个元素，所以相对二叉查找树减少了磁盘io次数。
B+树：所有数据都保存在叶子节点（所以查询速度稳定。io次数相对B树更少，高度比b树低）。叶子节点组成了一个有序链表（所以范围查询快）
红黑树：hashmap底层的数据结构
1.节点是红色或黑色。2.根节点是黑色。3.每个叶子节点都是黑色的空节点（NIL节点）。
4 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)
5.从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。




数据库索引：
	从数据结构来看：1.树索引（可以范围查询）    2.hash索引(能以 O(1) 时间进行查找，只支持精确查找，无法用于部分查找和范围查找。)
	存储角度来看：1.聚簇索引（索引与数据存放在一起，一个表只能有一个 ）   2.非聚簇索引（索引存放数据的地址：数据所在索引key的值）
	逻辑角度来看：
		1，普通索引：最基本的索引，没有任何限制，是我们经常使用到的索引。
       		2，唯一索引：与普通索引类似，不同的是，唯一索引的列值必须唯一，但允许为空值。
		（主键索引是特殊的唯一索引，不允许有空值。）
     		3，全文索引：全文索引（FULLTEXT）仅可以适用于MyISAM引擎的数据表，作用于CHAR，VARCHAR、TEXT数据类型的列。
    		 4、组合索引：将几个列作为一条索引进行检索，使用最左匹配原则。

如何查看查找时是否使用了索引？ 在sql语句前加 EXPLAIN，然后查看key字段使用了什么索引

 
回表查询：
	如果使用主键查找，那么使用的是聚簇索引，能直接获取到数据，而如果我们使用非聚簇索引查找，
	如果该索引不包含我们需要查找的的全部字段，那么就需要根据叶子节点存储的主键值在进行一次查找来找到我们需要的数据，这就是回表查询。
索引覆盖：
	查询时，只返回非聚索引列和其对应的聚索引列（假设id是主键，name是索引列：select id,name from table where name = 'tyy'）

如何避免回表查询：走索引覆盖：将被查询的字段建立到联合索引中

索引失效情况：
	1.使用like时，以“%关键词”进行查询。
	2.查询条件中带有 or （必须所有使用到的字段上面都有索引才会走索引查询）
	3.有函数运算不走索引：SELECT name FROM stu WHERE substring(name,1,3)='abc';
			将查询该为：SELECT name FROM stu WHERE name like 'abc%'，此时会走索引
	4.索引列参与表达式计算：SELECT name FROM stu WHERE age/2 = 10;
			将查询该为：SELECT name FROM stu WHERE age = 10*2，此时会走索引
	5.mysql优化后，如果全表扫面比走索引快时，不使用索引。
	6.在where中 进行 null 值的判断、使用 !=或<>时   不使用索引
	7.使用in或not in不一定会走索引
	8.查询条件不符合最左匹配原则时，不走索引
	9.数据类型出现隐式转换时，不走索引：

最左匹配原则：
	在联合索引的情况下，其中一个字段是有序的，而另一个只有在前面的字段确定，
	必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，
	（假如建立联合索引（a,b,c），select * from table_name where  a = 1 and b > 3：会走索引）
				select * from table_name where  b=2：不会走索引


建立索引的原则：
	1.经常出现在查询条件中。2.经常作为分组的列依据。3.经常出现在连接的连接条件中。4.更新频繁字段不适合创建索引。
索引并不是越多越好：
	1.本身占用一定的存储空间。2.更新一个表时，同时也要对索引进行更新。


sql查询优化：
	1.减少请求的数据量
		1.1只返回必要的列：最好不要使用 SELECT * 语句。
		1.2只返回必要的行：使用 LIMIT 语句来限制返回的数据。
		1.3缓存重复查询的数据：使用缓存可以避免在数据库中进行查询，特别在要查询的数据经常被重复查询时，
			缓存带来的查询性能提升将会是非常明显的。
	2.减少服务器端扫描的行数
		最有效的方式是使用索引来覆盖查询。（避免遇到索引失效的情况）




