计网模型：
	应用层->  (  表示层-> 会话层-> )  传输层 ->网络层 ->数据链路层 ->物理层

应用层协议：使用tcp：HTTP/S（超文本传输协议）、FTP（文件传输协议）、SMTP（简单邮件传输）、TELENT（tcp/ip终端仿真协议（远程登录））
	   使用udp：DHCP(动态主机配置协议)、DNS（域名解析服务）、NTP（网络时间协议（用于网络时间同步））

传输层协议：tcp（提供可靠传输服务，面向字节流：可能将应用进程多次递交的数据合并到一起发送，也可能将应用进程递交的数据分多次发送出去。）
	   udp（不保证可靠性，面向报文：收到来自应用进程的数据后，既不拆分也不合并，立即封装成数据报发送出去。）

网络层协议：ipv4/v6协议
	ipv4的组成：网络号+主机号。（由电子掩码来划分）

tcp保证可靠性的机制：
	1.检验和。
	2.序列号：将每次报文的数据进行编号，（当接收的数据少了某个序号的数据时，很快就能知道）
	3.确认应答：发送方发送带有序号的报文，接收方确认接收后，返回下一个期望收到的报文序号。
	4.超时重传：发送方发送完一个报文后，会启动重传计时器，计时器到时还未收到确认，则重传该报文。
	5.流量控制：根据接发双方能力不同，控制传输速率。
		   滑动窗口（发送方可以一次发送窗口内所有的报文段，当最左侧的确认收到后，窗口向右移动）
			（接收方对收到的报文全部保留并返回确认号（选择重传协议），当最左侧的报文收到后，窗口向右移动）
		   因此，窗口的大小很大程度上的决定了传输速率的快慢。
		滑动窗口(rwnd)与接收方机器的能力有关，拥塞窗口(cwnd)与网络环境有关。
	6.拥塞控制：可以解决网络环境变化带来的丢包问题，常用拥塞控制算法有：
		慢启动算法：在达到门限值之前，进行慢启动算法，cwnd呈指数增长。
		拥塞避免算法：达到门限值之后，进行拥塞避免算法，cwnd在每轮传输完成后加一。
			此时，如果发生了网络阻塞，则将门限值变为当前cwnd值的一半，cwnd值变为1，重新开始慢启动算法
		快重传和快恢复：（快重传：）当接收方没有收到期望的报文，则当下一个报文到达时，返回未收到报文的序号。
			     （快恢复：）当发送发收到三个重复的ack时，先将门当前cwnd减半，然后门限值变为当前cnwd值。
					然后继续执行拥塞避免算法。
	7.连接管理机制：三次握手，四次挥手。
		三次握手：1.A将 SYN（请求建立连接）=1，seq（该报文的序号）=x 的报文发送给B
			2.B收到连接请求后，将SYN=1，ACK（确认位）=1，akc=x+1（确认号为：将A的报文序号+1），seq=y 的报文返回给A
			3.A已经知道B已经同意建立连接，，但B还不知道连接是否建立成功，此时A将发给B的报文中可以下带数据。
			 A将（seq=x+1（B期望收到报文序号），ACK（确认位）=1，akc=y+1）的报文发送给A。
			4.当B收到A的确认报文，连接建立完成，可以开始数据传输。
		
		四次挥手：1.A将（FIN=1，seq='上次B发送的akc'）的报文发送给B，此时，A不再发送数据，但仍可以接收数据。
			2.B收到A的请求断开连接报文后，将（AKC=1，seq='上次A发送的akc'，akc='上次A的seq'+1）的报文发送给A
			   B发送报文给，告知B的应用进程，即将断开连接。
			3.等待B的应用进程发送完数据后，B将（FIN=1，ACK=1，seq=x，akc='与第2步的ack相同'）的报文发送给A。
			发送完成后，等待A的确认，一旦收到，B就断开连接。（若超时未收到，则重传后，继续等待A的确认）
			4.A收到B的同意断开连接后，返回确认报文（AKC=1，seq='B发送的ack'，akc='B的seq'+1）
			  然后A启动等待计时器，计时器到时后，A断开连接。
			
为什么TCP需要三次握手才能建立连接？
	为了防止已失效的连接请求报文突然又传送到服务器端，因而产生错误连接。
	客户端发出的连接请求报文并未丢失，而是在某个网络节点长时间滞留，以致延误到链接释放以后的某个时间才到的服务器端，
	此时，服务器端会误以为是客户端发出的一个新的链接请求，于是就向客户端发送了确认数据包，同意建立连接，
	若不采用“三次握手”，那么只要服务器端发出确认数据包，那么新的链接就建立了，由于此时客户端并未发出建立链接的请求，
	所有不会理会服务器端的确认，并不会与服务器端进行通信，而这时服务器端一直在等待客户端的请求，这样服务器端就会浪费一定的资源。
	若采用“三次握手”，由于服务器端并未收到来自客户端的确认，就会知道客户端并没有要求建立请求，也就不会建立链接。




TCP中有四种定时器(Timer，也称为“计时器”)：
重传计时器：Retransmission Timer：如果未收到确认报文，则计时器结束后重发。
坚持计时器：Persistent Timer
保活计时器：Keeplive Timer：用于确认连接是否正常，可以避免服务器出现故障后，客户端任然继续等待的情况
时间等待计时器：Time_Wait Timer：
		TCP确认关闭连接时，启动等待计时器，计时器结束后，双方真正断开连接。
		原因：如果没有等待计时器，A收到B的报文后直接关闭的话，此时，如果发生网络阻塞等原因，
			B未收到A的确认报文，B就永远无法关闭。
		         在等待计时器的时间内，如果B未收到A的确认报文，B就会重发之前的报文，而此时A也还未关闭，A会返回确认报文给B




IP地址与MAC地址：
	1.从层次上来说，IP地址是在网络层和以上各层使用的地址，是一种逻辑地址，而MAC地址是在数据链路层和物理层使用的地址。

	2.在发送数据的时候，数据包从上往下依次进行包装，在网络层在其首部封装 源IP，目的IP，
	等到数据发送到数据链路层，这时就被封装成了帧，MAC帧在发送的时候在其首部封装了源MAC地址和目的MAC地址，
	每一层都有它的对数据进行处理的格式。
	
	3.IP地址描述的是路途总体的 起点 和 终点;
	   MAC地址描述的是路途上的每一个区间的起点和终点;

为什么需要mac地址：
	局域网采用了用MAC地址来标识具体用户的方法。
	注意：具体实现：在交换机内部通过“表”的方式把MAC地址和IP地址一一对应，也就是所说的IP、MAC绑定。
	即使某台主机盗用了别人IP地址，但由于他没有别人MAC地址，因此也不会收到数据包。

HTTP：传输数据以明文显示，不安全
HTTPS：基于HTTP，基于SSL

	三个阶段：1.认证服务器：服务器会提供经CA机构认证颁发的服务器证书，
			如果认证该服务器证书的CA机构，存在于浏览器的受信任CA机构列表中，
			并且服务器证书中的信息与当前正在访问的网站（域名等）一致，
			那么浏览器就认为服务端是可信的，并从服务器证书中取得服务器公钥，用于后续流程
		2.协商会话密钥：客户端在认证完服务器，获得服务器的公钥之后，利用该公钥与服务器进行加密通信，协商出两个会话密钥。
		3.加密通讯

	工作过程：1.客户端将自己所支持的加密规则发送给服务器
		2.服务器选择一套加密算法和 hash 算法以及自己的身份信息（地址等）以证书的形式发送给浏览器，
		证书中包含服务器信息，加密公钥，证书的办法机构
		3.客户端收到证书后，开始验证证书的合法性，通过后，生成随机数并用公钥加密，
		用约定好的 hash 算法计算握手消息，然后用生成的密钥进行加密，然后一起发送给服务器。
		4.服务器用私钥解析出密码，用密码解析出握手消息。验证hash值是否与浏览器发来的一致。
		5.如果一致，则握手成功。

	
非对称式加密：
	RAS：RSA算法所依赖的是对极大整数做因数分解，所以对极大整数做因数分解的难度决定了RSA算法的可靠性。



HTTP状态码：
	1xx：表示目前是协议的中间状态，还需要后续请求 
	2xx：表示请求成功 
	3xx：表示重定向状态，需要重新请求： 
		需要重定向的情况：网站调整（如改变网页目录结构）；网页被移到一个新地址；网页扩展名改变(如应用需要把.php改成.Html或.shtml)。
		301：永久性转移，302：暂时性转移
	4xx：表示请求报文错误    404：资源未找到 	 403：服务器禁止访问
	5xx：服务器端错误	503：服务器繁忙，



输入一个url后的过程：
	1.DNS解析 2.TCP连接 3.发送HTTP请求 4.服务器处理请求并返回HTTP报文 5.浏览器解析渲染页面


CSRF攻击原理：
	1. 用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；
	2.在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；
	3. 用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；
	4. 网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A

防御策略：1.验证 HTTP Referer 字段（根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。）
	2.在请求地址中添加 token 并验证；3.在 HTTP 头中自定义属性并验证。












