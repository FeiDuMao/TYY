Set:
	SADD key value	添加元素
	SMEMBERS key	查看所有元素
	SISMEMBER key value  判断key中是否有value
	SCARD key	获取集合中的元素个数
	SREM key value	移除集合中的指定元素
	SDIFF key1 key2 	差集
	SINTER key1 key2 	交集
	SUNION key1 key2 	并集

BitMap:
	setbit sign 0 1	设置第0位为1
	setbit sign 1 0	设置第1位为0
	setbit sign 2 1	设置第2位为1
	getbit sign 0	查看第0位的状态
	bitcount sign	查看sign的位图状态(有多少位为1)
	
	
事务：	开启事务（multi）===>命令入队====>执行事务（exec）
			 	 取消事务（DISCARD）:队列中的命令都不会执行

持久化方式：
	RDB：快照
	AOF：追加

redis为什么快？
	1.完全基于内存，大部分请求都基于内存操作
	2.数据结构简单，对数据的操作也简单
	3.采用了单线程结构，避免了上下文切换和竞争
	4.使用了多路io复用，非阻塞io


redis6.0：采用了网络io多线程，执行指令单线程

redis与mysql一致性解决方案：
	1.先删缓存，后更新数据库：延时双删：先删除redis中的缓存，再写入mysql中，几百ms后，再次删除redis中的缓存

redis支持的数据类型
	String: 字符串
	Hash: 散列
	List: 列表
	Set: 集合
	Sorted Set: 有序集合
缓存穿透：
	指查询一个一定不存在的数据，由于缓存是不命中时需要从数据库查询，
	查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透。

解决缓存穿透：1.接口参数校验   2.设置空值   3.布隆过滤器

布隆过滤器：存储所有可能访问的 key，起到初步过滤的作用
	

缓存雪崩：
	如果缓存集中在一段时间内失效，所有的查询都落在数据库上，造成了缓存雪崩。

解决缓存雪崩：1.打散过期时间   2.热点数据不过期（lru算法） 
	3.加锁互斥：按 key 维度加锁，对于同一个 key，只允许一个线程去计算，其他线程原地阻塞等待第一个线程的计算结果，然后直接走缓存即可。

